#La configuración de Nginx se divide jerarquicamente en bloques los configuro de forma adecuada para cada petición

#El principal bloque es server, define un servidor virtual con normas para sus conexiones

server
{
	#La ip/puerto que escucha el bloque, al definirla en 443, escuchara todo lo que llegue por este puerto, en caso de
	#multiples opciones validas utilizara el siguiente comando, server_name, para ver cual es el adecuado
	#Utilizo el parámetro ssl para las conexiones HTTPS
	listen		443 ssl;

	#Sirve junto al listen para definir cual es la conexion, añado el nombre de mi dominio
	server_name	$DOMAIN_NAME;

	#Defino la carpeta raiz donde el servidor buscara los archivos, en alpine seria solo /var/www pero al usar wordpress
	# utilizamos la carpeta /var/www/wordpress que se generara al levantar wordpress y se almacena la info necesaria
	root	/var/www/wordpress;

	#Index es el archivo por defecto que intentara mostrar el servidor cuando la particion sea la direccion de una carpeta
	#asi buscara especificamente en la directiva index.php
	index	index.php;

	# SSL Settings

	#Al solo aceptar conexiones HTTPS con ssl defino la localizacion del certificado ssl de nuestra pagina
	ssl_certificate		/etc/ssl/certs/$DOMAIN_NAME.crt;

	#Igual que lo anterior pero con la key privada de nuestro certificado
	ssl_certificate_key	/etc/ssl/private/$DOMAIN_NAME.key;

	#Defino el protocolo concreto ssl, el más actualizado
	ssl_protocols		TLSv1.3;

	# Location Settings

	#Este location permite aceptar cualquier peticion que empiece con /, servira de localizador por defecto si no hay otra
	location /
	{
		#El comando try_files busca los archivos con el nombre especificado en los distintos argumentos
		#los args son los parametros que necesita wordpess para consultar la base de datos y devolver la pagina correcta
		try_files $uri $uri/ /index.php$is_args$args;
	}

	#Aqui intercepto todas las peticiones terminadas en .php, incluso con argumentos extra
	#El ~ señala al gninx que el parametro de busqueda es de expresion regular teniendo en cuenta las mayusculas

	#El simbolo ^ indica que existe una coincidencia adecuada, ninguno de los caracteres dentro de [] son validos
	#solo aceptara peticiones que no incluyan / justo antes del .php
	#el simbolo . de \.php
	#Estas peticiones seran redirigidias al servidor fastcgi, que sera wordpress, que interpretara las peticiones
	#devolviendo la pagina correta
	location ~ [^/]\.php(/|$)
	{
		#Tal como funciona FastCGI si no existe el archivo que busca lo procesa como informacion adicional del path
		#esto produce una vulneravilidad sobretodo si se permite subir archivos y puede provocar que se ejecuten
		#archivos .php maliciosos
		#Entonces en vez de ejecutarlo directamente utilizo este comando para definir manualmente la parte de la peticion
		#que sera interpretada como script y lo que sera interpretado como parte extra
		fastcgi_split_path_info ^(.+?\.php)(/.*)$;

		#Para evitar las vulnerabilidades antes mencionadas descativo la funcion del servidor php que autocorrige las
		#direcciones, y probamos la exitencia primero de la script al ejecutar el try_files, si no, devolverá un error 404
		try_files $fastcgi_script_name =404;

		#Debido al funcionamiento del try_files, la variable $fastcgi_path_info
		#es tras su uso, por lo que guardamos su valor original para poder utilizarlo más adelante. Cuando try_files intenta
		#mandar una petición nueva, el split de antes borra el fastcgi_path_info. Por eso es importante guardarlo antes.
		set $path_info $fastcgi_path_info;

		#Permite configurar la dirección del servidor de FastCGI que utilizaremos. En nuestro
		#caso será nuestro servidor de wordpress, que estará escuchando en el puerto 9000
		fastcgi_pass wordpress:9000;

		#este parámetro permite definir cuál será el índice por defecto
		#que se añadirá a las peticiones acabadas en /,
		#es decir, a las peticiones de carpetas.
		fastcgi_index index.php;

		#incluyo el archivo fastcgi_params, que tiene una configuración estándar de muchos de estos parámetros
		include fastcgi_params;

		#Se trata de la localización de la script que ha de
		#ejecutar el servidor php. $document_root es la carpeta definida con el comando root, que unido a $fastcgi_script_name
		#nos permite obtener el path completo de la script a ejecutar
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

		#guardaremos los argumentos extra de la script,
		#utilizando la variable $path_info que habíamos reservado anteriormente
		fastcgi_param PATH_INFO $path_info;
	}
}

#Redirecciono www. a non-www
server
{
	listen	443 ssl;
	server_name www.$DOMAIN_NAME;

	return 301 $scheme://$DOMAIN_NAME$request_uri;
}
